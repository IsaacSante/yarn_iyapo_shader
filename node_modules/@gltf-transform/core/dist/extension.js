/**
 * # Extension
 *
 * *Base class for all Extensions.*
 *
 * Extensions enhance a glTF {@link Document} with additional features and schema, beyond the core
 * glTF specification. Common extensions may be imported from the `@gltf-transform/extensions`
 * package, or custom extensions may be created by extending this base class.
 *
 * An extension is added to a Document by calling {@link Document.createExtension} with the
 * extension constructor. The extension object may then be used to construct
 * {@link ExtensionProperty} instances, which are attached to properties throughout the Document
 * as prescribed by the extension itself.
 *
 * For more information on available extensions and their usage, see [Extensions](/extensions).
 *
 * Reference:
 * - [glTF â†’ Extensions](https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#specifying-extensions)
 * - [glTF Extension Registry](https://github.com/KhronosGroup/glTF/blob/master/extensions)
 *
 * @category Extensions
 */
export class Extension {
    /** @hidden */
    constructor(doc) {
        this.doc = doc;
        /**
         * {@link Property} types this extension will provide. *Most extensions don't need to implement
         * this.*
         */
        this.provideTypes = [];
        /** Dependency IDs needed by this extension, to be installed before I/O. */
        this.dependencies = [];
        this.required = false;
        this.properties = new Set();
        doc.getRoot()._enableExtension(this);
    }
    /** Disables and removes the extension from the Document. */
    dispose() {
        this.doc.getRoot()._disableExtension(this);
        for (const property of this.properties) {
            property.dispose();
        }
    }
    /**
     * Indicates to the client whether it is OK to load the asset when this extension is not
     * recognized. Optional extensions are generally preferred, if there is not a good reason
     * to require a client to completely fail when an extension isn't known.
     */
    isRequired() {
        return this.required;
    }
    /**
     * Indicates to the client whether it is OK to load the asset when this extension is not
     * recognized. Optional extensions are generally preferred, if there is not a good reason
     * to require a client to completely fail when an extension isn't known.
     */
    setRequired(required) {
        this.required = required;
        return this;
    }
    /**********************************************************************************************
     * ExtensionPropertyParent implementation.
     */
    /** @hidden */
    addExtensionProperty(property) {
        this.properties.add(property);
        return this;
    }
    /** @hidden */
    removeExtensionProperty(property) {
        this.properties.delete(property);
        return this;
    }
    /**********************************************************************************************
     * I/O implementation.
     */
    /** Installs dependencies required by the extension. */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    install(key, dependency) {
        return this;
    }
    /**
     * Used by the {@link PlatformIO} utilities when reading a glTF asset. This method may
     * optionally be implemented by an extension, and should then support any property type
     * declared by the Extension's {@link Extension.provideTypes} list. The Extension will
     * be given a ReaderContext instance, and is expected to update either the context or its
     * {@link JSONDocument} with resources known to the Extension. *Most extensions don't need to
     * implement this.*
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    provide(readerContext, propertyType) {
        return this;
    }
}
