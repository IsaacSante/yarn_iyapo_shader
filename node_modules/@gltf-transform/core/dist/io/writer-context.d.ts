import { JSONDocument } from '../json-document';
import { Accessor, Buffer, Camera, Material, Mesh, Node, Property, Skin, Texture, TextureInfo } from '../properties';
import { Logger } from '../utils';
import { WriterOptions } from './writer';
declare type PropertyDef = GLTF.IScene | GLTF.INode | GLTF.IMaterial | GLTF.ISkin | GLTF.ITexture;
/**
 * Model class providing writing state to a {@link Writer} and its {@link Extension}
 * implementations.
 *
 * @hidden
 */
export declare class WriterContext {
    readonly jsonDoc: JSONDocument;
    readonly options: WriterOptions;
    readonly accessorIndexMap: Map<Accessor, number>;
    readonly cameraIndexMap: Map<Camera, number>;
    readonly skinIndexMap: Map<Skin, number>;
    readonly materialIndexMap: Map<Material, number>;
    readonly meshIndexMap: Map<Mesh, number>;
    readonly nodeIndexMap: Map<Node, number>;
    readonly imageIndexMap: Map<Texture, number>;
    readonly textureDefIndexMap: Map<string, number>;
    readonly textureInfoDefMap: Map<TextureInfo, GLTF.ITextureInfo>;
    readonly samplerDefIndexMap: Map<string, number>;
    readonly imageData: ArrayBuffer[];
    bufferURIGenerator: UniqueURIGenerator;
    imageURIGenerator: UniqueURIGenerator;
    logger: Logger;
    constructor(jsonDoc: JSONDocument, options: WriterOptions);
    /**
     * Creates a TextureInfo definition, and any Texture or Sampler definitions it requires. If
     * possible, Texture and Sampler definitions are shared.
     */
    createTextureInfoDef(texture: Texture, textureInfo: TextureInfo): GLTF.ITextureInfo;
    createPropertyDef(property: Property): PropertyDef;
    createAccessorDef(accessor: Accessor): GLTF.IAccessor;
    createImageData(imageDef: GLTF.IImage, data: ArrayBuffer, texture: Texture): void;
}
export declare class UniqueURIGenerator {
    private readonly multiple;
    private readonly basename;
    private counter;
    constructor(multiple: boolean, basename: string);
    createURI(object: Texture | Buffer, extension: string): string;
}
export {};
