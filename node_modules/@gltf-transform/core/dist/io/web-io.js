import { PlatformIO } from './platform-io';
const DEFAULT_INIT = {};
/**
 * # WebIO
 *
 * *I/O service for Web.*
 *
 * The most common use of the I/O service is to read/write a {@link Document} with a given path.
 * Methods are also available for converting in-memory representations of raw glTF files, both
 * binary (*ArrayBuffer*) and JSON ({@link JSONDocument}).
 *
 * Usage:
 *
 * ```typescript
 * import { WebIO } from '@gltf-transform/core';
 *
 * const io = new WebIO({credentials: 'include'});
 *
 * // Read.
 * const doc = await io.read('model.glb');  // → Document
 * const doc = io.readBinary(ArrayBuffer);  // → Document
 *
 * // Write.
 * const arrayBuffer = io.writeBinary(doc); // → ArrayBuffer
 * ```
 *
 * @category I/O
 */
export class WebIO extends PlatformIO {
    /**
     * Constructs a new WebIO service. Instances are reusable.
     * @param _fetchConfig Configuration object for Fetch API.
     */
    constructor(_fetchConfig = DEFAULT_INIT) {
        super();
        this._fetchConfig = _fetchConfig;
    }
    /**********************************************************************************************
     * Public.
     */
    /** Loads a URI and returns a {@link Document} instance. */
    read(uri) {
        return this.readAsJSON(uri).then((jsonDoc) => this.readJSON(jsonDoc));
    }
    /** Loads a local path and returns a {@link JSONDocument} struct, without parsing. */
    readAsJSON(uri) {
        const isGLB = !!(uri.match(/\.glb$/) || uri.match(/^data:application\/octet-stream;/));
        return isGLB ? this._readGLB(uri) : this._readGLTF(uri);
    }
    /**********************************************************************************************
     * Private.
     */
    /** @hidden */
    _readGLTF(uri) {
        const jsonDoc = { json: {}, resources: {} };
        return fetch(uri, this._fetchConfig)
            .then((response) => response.json())
            .then((json) => {
            jsonDoc.json = json;
            const pendingResources = [...json.images, ...json.buffers]
                .map((resource) => {
                if (resource.uri) {
                    return fetch(resource.uri, this._fetchConfig)
                        .then((response) => response.arrayBuffer())
                        .then((arrayBuffer) => {
                        jsonDoc.resources[resource.uri] = arrayBuffer;
                    });
                }
            });
            return Promise.all(pendingResources).then(() => jsonDoc);
        });
    }
    /** @hidden */
    _readGLB(uri) {
        return fetch(uri, this._fetchConfig)
            .then((response) => response.arrayBuffer())
            .then((arrayBuffer) => this.binaryToJSON(arrayBuffer));
    }
}
