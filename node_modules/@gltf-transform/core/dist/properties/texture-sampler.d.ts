import { PropertyType } from '../constants';
/**
 * # TextureSampler
 *
 * *Settings associated with a particular use of a {@link Texture}.*
 *
 * Different materials may reuse the same texture but with different texture coordinates. For other
 * settings affecting application of a texture, see {@link TextureInfo}.
 *
 * References:
 * - [glTF â†’ Samplers](https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#samplers)
 *
 * @category Properties
 */
export declare class TextureSampler {
    readonly propertyType = PropertyType.TEXTURE_SAMPLER;
    private _magFilter;
    private _minFilter;
    private _wrapS;
    private _wrapT;
    copy(other: this): this;
    /** UV wrapping mode. Values correspond to WebGL enums. */
    static TextureWrapMode: {
        CLAMP_TO_EDGE: GLTF.TextureWrapMode;
        MIRRORED_REPEAT: GLTF.TextureWrapMode;
        REPEAT: GLTF.TextureWrapMode;
    };
    /** Magnification filter. Values correspond to WebGL enums. */
    static TextureMagFilter: {
        NEAREST: GLTF.TextureMagFilter;
        LINEAR: GLTF.TextureMagFilter;
    };
    /** Minification filter. Values correspond to WebGL enums. */
    static TextureMinFilter: {
        NEAREST: GLTF.TextureMinFilter;
        LINEAR: GLTF.TextureMinFilter;
        NEAREST_MIPMAP_NEAREST: GLTF.TextureMinFilter;
        LINEAR_MIPMAP_NEAREST: GLTF.TextureMinFilter;
        NEAREST_MIPMAP_LINEAR: GLTF.TextureMinFilter;
        LINEAR_MIPMAP_LINEAR: GLTF.TextureMinFilter;
    };
    /**********************************************************************************************
     * Min/mag filter.
     */
    /** Returns the magnification filter applied to the texture. */
    getMagFilter(): GLTF.TextureMagFilter;
    /** Sets the magnification filter applied to the texture. */
    setMagFilter(magFilter: GLTF.TextureMagFilter): this;
    /** Sets the minification filter applied to the texture. */
    getMinFilter(): GLTF.TextureMinFilter;
    /** Returns the minification filter applied to the texture. */
    setMinFilter(minFilter: GLTF.TextureMinFilter): this;
    /**********************************************************************************************
     * UV wrapping.
     */
    /** Returns the S (U) wrapping mode for UVs used by the texture. */
    getWrapS(): GLTF.TextureWrapMode;
    /** Sets the S (U) wrapping mode for UVs used by the texture. */
    setWrapS(wrapS: GLTF.TextureWrapMode): this;
    /** Returns the T (V) wrapping mode for UVs used by the texture. */
    getWrapT(): GLTF.TextureWrapMode;
    /** Sets the T (V) wrapping mode for UVs used by the texture. */
    setWrapT(wrapT: GLTF.TextureWrapMode): this;
}
