import { PropertyType } from '../constants';
import { ExtensibleProperty } from './extensible-property';
/**
 * # TextureInfo
 *
 * *Settings associated with a particular use of a {@link Texture}.*
 *
 * Different materials may reuse the same texture but with different texture coordinates,
 * minFilter/magFilter, or wrapS/wrapT settings. The TextureInfo class contains settings
 * derived from both the "TextureInfo" and "Sampler" properties in the glTF specification,
 * consolidated here for simplicity.
 *
 * TextureInfo properties cannot be directly created. For any material texture slot, such as
 * baseColorTexture, there will be a corresponding method to obtain the TextureInfo for that slot.
 * For example, see {@link Material.getBaseColorTextureInfo}.
 *
 * References:
 * - [glTF â†’ Texture Info](https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#reference-textureinfo)
 *
 * @category Properties
 */
export declare class TextureInfo extends ExtensibleProperty {
    readonly propertyType = PropertyType.TEXTURE_INFO;
    private _texCoord;
    private _magFilter;
    private _minFilter;
    private _wrapS;
    private _wrapT;
    /** UV wrapping mode. Values correspond to WebGL enums. */
    static TextureWrapMode: {
        CLAMP_TO_EDGE: GLTF.TextureWrapMode;
        MIRRORED_REPEAT: GLTF.TextureWrapMode;
        REPEAT: GLTF.TextureWrapMode;
    };
    /** Magnification filter. Values correspond to WebGL enums. */
    static TextureMagFilter: {
        NEAREST: GLTF.TextureMagFilter;
        LINEAR: GLTF.TextureMagFilter;
    };
    /** Minification filter. Values correspond to WebGL enums. */
    static TextureMinFilter: {
        NEAREST: GLTF.TextureMinFilter;
        LINEAR: GLTF.TextureMinFilter;
        NEAREST_MIPMAP_NEAREST: GLTF.TextureMinFilter;
        LINEAR_MIPMAP_NEAREST: GLTF.TextureMinFilter;
        NEAREST_MIPMAP_LINEAR: GLTF.TextureMinFilter;
        LINEAR_MIPMAP_LINEAR: GLTF.TextureMinFilter;
    };
    copy(other: this, resolve?: <T extends import("./property").Property>(t: T) => T): this;
    /**********************************************************************************************
    * Texture coordinates.
    */
    /** Returns the texture coordinate (UV set) index for the texture. */
    getTexCoord(): number;
    /** Sets the texture coordinate (UV set) index for the texture. */
    setTexCoord(texCoord: number): this;
    /**********************************************************************************************
    * Min/mag filter.
    */
    /** Returns the magnification filter applied to the texture. */
    getMagFilter(): GLTF.TextureMagFilter;
    /** Sets the magnification filter applied to the texture. */
    setMagFilter(magFilter: GLTF.TextureMagFilter): this;
    /** Sets the minification filter applied to the texture. */
    getMinFilter(): GLTF.TextureMinFilter;
    /** Returns the minification filter applied to the texture. */
    setMinFilter(minFilter: GLTF.TextureMinFilter): this;
    /**********************************************************************************************
    * UV wrapping.
    */
    /** Returns the S (U) wrapping mode for UVs used by the texture. */
    getWrapS(): GLTF.TextureWrapMode;
    /** Sets the S (U) wrapping mode for UVs used by the texture. */
    setWrapS(wrapS: GLTF.TextureWrapMode): this;
    /** Returns the T (V) wrapping mode for UVs used by the texture. */
    getWrapT(): GLTF.TextureWrapMode;
    /** Sets the T (V) wrapping mode for UVs used by the texture. */
    setWrapT(wrapT: GLTF.TextureWrapMode): this;
}
