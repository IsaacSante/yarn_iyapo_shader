var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { GraphChildList } from '../graph';
import { COPY_IDENTITY, Property } from './property';
// Breaking change introduced in v0.6.
const TOKEN_WARNING = 'Pass extension name (string) as lookup token, not a constructor.';
/**
 * # ExtensibleProperty
 *
 * *A {@link Property} that can have {@link ExtensionProperty} instances attached.*
 *
 * Most properties — excluding {@link Root} and {@link ExtensionProperty} — are extensible. See the
 * {@link Extension} documentation for information about how to use extensions.
 *
 * @category Properties
 */
export class ExtensibleProperty extends Property {
    constructor() {
        super(...arguments);
        this.extensions = [];
    }
    copy(other, resolve = COPY_IDENTITY) {
        super.copy(other, resolve);
        this.clearGraphChildList(this.extensions);
        other.extensions.forEach((link) => {
            const extension = link.getChild();
            this.setExtension(extension.extensionName, resolve(extension));
        });
        return this;
    }
    /**
     * Returns an {@link ExtensionProperty} attached to this Property, if any. *Not available on
     * {@link Root} properties.*
     */
    getExtension(name) {
        if (typeof name !== 'string')
            throw new Error(TOKEN_WARNING);
        const link = this.extensions.find((link) => link.getChild().extensionName === name);
        return link ? link.getChild() : null;
    }
    /**
     * Attaches the given {@link ExtensionProperty} to this Property. For a given extension, only
     * one ExtensionProperty may be attached to any one Property at a time. *Not available on
     * {@link Root} properties.*
     */
    setExtension(name, extensionProperty) {
        if (typeof name !== 'string')
            throw new Error(TOKEN_WARNING);
        // Remove previous extension.
        const prevExtension = this.getExtension(name);
        if (prevExtension)
            this.removeGraphChild(this.extensions, prevExtension);
        // Stop if deleting the extension.
        if (!extensionProperty)
            return this;
        // Add next extension.
        extensionProperty._validateParent(this);
        return this.addGraphChild(this.extensions, this.graph.link(name, this, extensionProperty));
    }
    /**
     * Lists all {@link ExtensionProperty} instances attached to this Property. *Not available on
     * {@link Root} properties.*
     */
    listExtensions() {
        return this.extensions.map((link) => link.getChild());
    }
}
__decorate([
    GraphChildList
], ExtensibleProperty.prototype, "extensions", void 0);
