/**
 * # ColorUtils
 *
 * *Common utilities for working with colors in vec3, vec4, or hexadecimal form.*
 *
 * Provides methods to convert linear components (vec3, vec4) to sRGB hex values. All colors in
 * the glTF specification, excluding color textures, are linear. Hexadecimal values, in sRGB
 * colorspace, are accessible through helper functions in the API as a convenience.
 *
 * ```typescript
 * // Hex (sRGB) to factor (linear).
 * const factor = ColorUtils.hexToFactor(0xFFCCCC, []);
 *
 * // Factor (linear) to hex (sRGB).
 * const hex = ColorUtils.factorToHex([1, .25, .25])
 * ```
 *
 * @category Utilities
 */
export class ColorUtils {
    /**
     * Converts sRGB hexadecimal to linear components.
     * @typeParam T vec3 or vec4 linear components.
     */
    static hexToFactor(hex, target) {
        hex = Math.floor(hex);
        target[0] = (hex >> 16 & 255) / 255;
        target[1] = (hex >> 8 & 255) / 255;
        target[2] = (hex & 255) / 255;
        return this.convertSRGBToLinear(target, target);
    }
    /**
     * Converts linear components to sRGB hexadecimal.
     * @typeParam T vec3 or vec4 linear components.
     */
    static factorToHex(factor) {
        const target = [...factor];
        const [r, g, b] = this.convertLinearToSRGB(factor, target);
        return (r * 255) << 16 ^ (g * 255) << 8 ^ (b * 255) << 0;
    }
    /**
     * Converts sRGB components to linear components.
     * @typeParam T vec3 or vec4 linear components.
     */
    static convertSRGBToLinear(source, target) {
        for (let i = 0; i < 3; i++) {
            target[i] = (source[i] < 0.04045)
                ? source[i] * 0.0773993808
                : Math.pow(source[i] * 0.9478672986 + 0.0521327014, 2.4);
        }
        return target;
    }
    /**
     * Converts linear components to sRGB components.
     * @typeParam T vec3 or vec4 linear components.
     */
    static convertLinearToSRGB(source, target) {
        for (let i = 0; i < 3; i++) {
            target[i] = (source[i] < 0.0031308)
                ? source[i] * 12.92
                : 1.055 * (Math.pow(source[i], 0.41666)) - 0.055;
        }
        return target;
    }
}
