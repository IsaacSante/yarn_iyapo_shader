import { Link } from './graph-links';
/**
 * A graph manages a network of {@link GraphNode} nodes, connected
 * by {@link @Link} edges.
 *
 * @hidden
 * @category Graph
 */
export class Graph {
    constructor() {
        this._links = [];
    }
    getLinks() {
        return this._links;
    }
    listParents(node) {
        // TODO(optimize)
        return this._links
            .filter((link) => link.getChild() === node)
            .map((link) => link.getParent());
    }
    listChildren(node) {
        // TODO(optimize)
        return this._links
            .filter((link) => link.getParent() === node)
            .map((link) => link.getChild());
    }
    disconnectChildren(node) {
        // TODO(optimize)
        this._links
            .filter((link) => link.getParent() === node)
            .forEach((link) => link.dispose());
        return this;
    }
    disconnectParents(node, filter) {
        // TODO(optimize)
        let links = this._links.filter((link) => link.getChild() === node);
        if (filter) {
            links = links.filter((link) => filter(link.getParent()));
        }
        links.forEach((link) => link.dispose());
        return this;
    }
    /**
    * Creates a link between two {@link GraphNode} instances. Link is returned
    * for the caller to store.
    * @param a Owner
    * @param b Resource
    */
    link(name, a, b) {
        // If there's no resource, return a null link. Avoids a lot of boilerplate in node setters.
        if (!b)
            return null;
        const link = new Link(name, a, b);
        this.registerLink(link);
        return link;
    }
    registerLink(link) {
        this._links.push(link);
        link.onDispose(() => this.unlink(link));
        return link;
    }
    /**
    * Removes the link from the graph. This method should only be invoked by
    * the onDispose() listener created in {@link link()}. The public method
    * of removing a link is {@link link.dispose()}.
    * @param link
    */
    unlink(link) {
        this._links = this._links.filter((l) => l !== link);
        return this;
    }
}
