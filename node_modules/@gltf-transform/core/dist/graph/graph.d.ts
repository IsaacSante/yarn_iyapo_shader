import { Link } from './graph-links';
import { GraphNode } from './graph-node';
/**
 * A graph manages a network of {@link GraphNode} nodes, connected
 * by {@link @Link} edges.
 *
 * @hidden
 * @category Graph
 */
export declare class Graph {
    private _links;
    private _parentRefs;
    private _childRefs;
    getLinks(): Link<GraphNode, GraphNode>[];
    listParents(node: GraphNode): GraphNode[];
    listChildren(node: GraphNode): GraphNode[];
    disconnectChildren(node: GraphNode): this;
    disconnectParents(node: GraphNode, filter?: (n: GraphNode) => boolean): this;
    swapChild(parent: GraphNode, prevChild: GraphNode, nextChild: GraphNode): this;
    /**
    * Creates a link between two {@link GraphNode} instances. Link is returned
    * for the caller to store.
    * @param a Owner
    * @param b Resource
    */
    link<A extends GraphNode, B extends GraphNode>(name: string, a: A, b: B): Link<A, B>;
    protected registerLink(link: Link<GraphNode, GraphNode>): Link<GraphNode, GraphNode>;
    /**
    * Removes the link from the graph. This method should only be invoked by
    * the onDispose() listener created in {@link link()}. The public method
    * of removing a link is {@link link.dispose()}.
    * @param link
    */
    private unlink;
}
