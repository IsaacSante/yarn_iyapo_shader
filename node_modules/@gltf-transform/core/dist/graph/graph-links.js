/**
 * Represents a connection between two {@link GraphNode} resources in a {@link Graph}.
 *
 * The left node is considered the owner, and the right node the resource. The
 * owner is responsible for being able find and remove a reference to a resource, given
 * that link. The resource does not hold a reference to the link or to the owner,
 * although that reverse lookup can be done on the graph.
 *
 * @hidden
 * @category Graph
 */
export class Link {
    constructor(_name, _parent, _child) {
        this._name = _name;
        this._parent = _parent;
        this._child = _child;
        this._disposed = false;
        this._listeners = [];
        if (!_parent.canLink(_child)) {
            throw new Error('Cannot link disconnected graphs/documents.');
        }
    }
    /** Name. */
    getName() { return this._name; }
    /** Owner node. */
    getParent() { return this._parent; }
    /** Resource node. */
    getChild() { return this._child; }
    /** Sets the child node. */
    setChild(child) {
        this._child = child;
        return this;
    }
    /** Destroys a (currently intact) link, updating both the graph and the owner. */
    dispose() {
        if (this._disposed)
            return;
        this._disposed = true;
        this._listeners.forEach((fn) => fn());
        this._listeners.length = 0;
    }
    /** Registers a listener to be invoked if this link is destroyed. */
    onDispose(fn) {
        this._listeners.push(fn);
        return this;
    }
    /** Whether this link has been destroyed. */
    isDisposed() { return this._disposed; }
}
