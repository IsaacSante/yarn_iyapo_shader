import { ExtensionProperty, PropertyType, Texture, TextureInfo, vec3 } from '@gltf-transform/core';
/** Documentation in {@link EXTENSIONS.md}. */
export declare class Specular extends ExtensionProperty {
    readonly propertyType = "Specular";
    readonly parentTypes: PropertyType[];
    readonly extensionName = "KHR_materials_specular";
    static EXTENSION_NAME: string;
    private _specularFactor;
    private _specularColorFactor;
    private specularTexture;
    private specularTextureInfo;
    copy(other: this, resolve?: <T extends import("@gltf-transform/core").Property>(t: T) => T): this;
    dispose(): void;
    /**********************************************************************************************
     * Specular.
     */
    /** Specular; linear multiplier. See {@link getSpecularTexture}. */
    getSpecularFactor(): number;
    /** Specular; linear multiplier. See {@link getSpecularTexture}. */
    setSpecularFactor(specularFactor: number): this;
    /** Specular color; components in linear space. See {@link getSpecularTexture}. */
    getSpecularColorFactor(): vec3;
    /** Specular color; components in linear space. See {@link getSpecularTexture}. */
    setSpecularColorFactor(specularColorFactor: vec3): this;
    /** Specular color; hexadecimal in sRGB colorspace. See {@link getSpecularTexture} */
    getSpecularColorHex(): number;
    /** Specular color; hexadecimal in sRGB colorspace. See {@link getSpecularTexture} */
    setSpecularColorHex(hex: number): this;
    /**
     * Specular texture; linear multiplier. Configures the strength of the specular reflection in
     * the dielectric BRDF. A value of zero disables the specular reflection, resulting in a pure
     * diffuse material.
     *
     * A 4-channel texture that defines the F0 color of the specular reflection (RGB channels,
     * encoded in sRGB) and the specular factor (A). Will be multiplied by specularFactor and
     * specularColorFactor.
     */
    getSpecularTexture(): Texture;
    /**
     * Settings affecting the material's use of its specular texture. If no texture is attached,
     * {@link TextureInfo} is `null`.
     */
    getSpecularTextureInfo(): TextureInfo;
    /** Sets specular texture. See {@link getSpecularTexture}. */
    setSpecularTexture(texture: Texture): this;
}
