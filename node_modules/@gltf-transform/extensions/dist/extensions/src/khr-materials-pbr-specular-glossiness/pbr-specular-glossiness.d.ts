import { ExtensionProperty, PropertyType, Texture, TextureInfo, TextureSampler, vec3, vec4 } from '@gltf-transform/core';
/** Documentation in {@link EXTENSIONS.md}. */
export declare class PBRSpecularGlossiness extends ExtensionProperty {
    readonly propertyType = "PBRSpecularGlossiness";
    readonly parentTypes: PropertyType[];
    readonly extensionName = "KHR_materials_pbrSpecularGlossiness";
    static EXTENSION_NAME: string;
    private _diffuseFactor;
    private _specularFactor;
    private _glossinessFactor;
    private diffuseTexture;
    private specularGlossinessTexture;
    copy(other: this, resolve?: <T extends import("@gltf-transform/core").Property>(t: T) => T): this;
    /**********************************************************************************************
     * Diffuse.
     */
    /** Diffuse; linear multiplier. See {@link getDiffuseTexture}. */
    getDiffuseFactor(): vec4;
    /** Diffuse; linear multiplier. See {@link getDiffuseTexture}. */
    setDiffuseFactor(diffuseFactor: vec4): this;
    /** Diffuse; hex color in sRGB colorspace. */
    getDiffuseHex(): number;
    /** Diffuse; hex color in sRGB colorspace. */
    setDiffuseHex(hex: number): this;
    /**
     * Diffuse texture; linear multiplier. Alternative to baseColorTexture used within the
     * spec/gloss PBR workflow.
     */
    getDiffuseTexture(): Texture;
    /**
     * Settings affecting the material's use of its diffuse texture. If no texture is attached,
     * {@link TextureInfo} is `null`.
     */
    getDiffuseTextureInfo(): TextureInfo;
    /**
     * Settings affecting the material's use of its diffuse texture. If no texture is attached,
     * {@link TextureSampler} is `null`.
     */
    getDiffuseTextureSampler(): TextureSampler;
    /** Sets diffuse texture. See {@link getDiffuseTexture}. */
    setDiffuseTexture(texture: Texture): this;
    /**********************************************************************************************
     * Specular.
     */
    /** Specular; linear multiplier. */
    getSpecularFactor(): vec3;
    /** Specular; linear multiplier. */
    setSpecularFactor(specularFactor: vec3): this;
    /**********************************************************************************************
     * Glossiness.
     */
    /** Glossiness; linear multiplier. */
    getGlossinessFactor(): number;
    /** Glossiness; linear multiplier. */
    setGlossinessFactor(glossinessFactor: number): this;
    /**********************************************************************************************
     * Specular/Glossiness.
     */
    /** Spec/gloss texture; linear multiplier. */
    getSpecularGlossinessTexture(): Texture;
    /**
     * Settings affecting the material's use of its spec/gloss texture. If no texture is attached,
     * {@link TextureInfo} is `null`.
     */
    getSpecularGlossinessTextureInfo(): TextureInfo;
    /**
     * Settings affecting the material's use of its spec/gloss texture. If no texture is attached,
     * {@link TextureSampler} is `null`.
     */
    getSpecularGlossinessTextureSampler(): TextureSampler;
    /** Spec/gloss texture; linear multiplier. */
    setSpecularGlossinessTexture(texture: Texture): this;
}
