import { ExtensionProperty, PropertyType, vec3 } from '@gltf-transform/core';
export declare enum LightType {
    POINT = "point",
    SPOT = "spot",
    DIRECTIONAL = "directional"
}
/** Documentation in {@link EXTENSIONS.md}. */
export declare class Light extends ExtensionProperty {
    readonly propertyType = "Light";
    readonly parentTypes: PropertyType[];
    readonly extensionName = "KHR_lights_punctual";
    static EXTENSION_NAME: string;
    private _color;
    private _intensity;
    private _type;
    private _range;
    private _innerConeAngle;
    private _outerConeAngle;
    copy(other: this, resolve?: <T extends import("@gltf-transform/core").Property>(t: T) => T): this;
    /**********************************************************************************************
     * COLOR.
     */
    /** Components (R, G, B) of light's color in linear space. */
    getColor(): vec3;
    /** Components (R, G, B) of light's color in linear space. */
    setColor(color: vec3): this;
    /** Hex light color in sRGB colorspace. */
    getColorHex(): number;
    /** Hex light color in sRGB colorspace. */
    setColorHex(hex: number): this;
    /**********************************************************************************************
     * INTENSITY.
     */
    /**
     * Brightness of light. Units depend on the type of light: point and spot lights use luminous
     * intensity in candela (lm/sr) while directional lights use illuminance in lux (lm/m2).
     */
    getIntensity(): number;
    /**
     * Brightness of light. Units depend on the type of light: point and spot lights use luminous
     * intensity in candela (lm/sr) while directional lights use illuminance in lux (lm/m2).
     */
    setIntensity(intensity: number): this;
    /**********************************************************************************************
     * TYPE.
     */
    /** Type. */
    getType(): LightType;
    /** Type. */
    setType(type: LightType): this;
    /**********************************************************************************************
     * RANGE.
     */
    /**
     * Hint defining a distance cutoff at which the light's intensity may be considered to have
     * reached zero. Supported only for point and spot lights. Must be > 0. When undefined, range
     * is assumed to be infinite.
     */
    getRange(): number;
    /**
     * Hint defining a distance cutoff at which the light's intensity may be considered to have
     * reached zero. Supported only for point and spot lights. Must be > 0. When undefined, range
     * is assumed to be infinite.
     */
    setRange(range: number): this;
    /**********************************************************************************************
     * SPOT LIGHT PROPERTIES
     */
    /**
     * Angle, in radians, from centre of spotlight where falloff begins. Must be ≥ 0 and
     * < outerConeAngle.
     */
    getInnerConeAngle(): number;
    /**
     * Angle, in radians, from centre of spotlight where falloff begins. Must be ≥ 0 and
     * < outerConeAngle.
     */
    setInnerConeAngle(innerConeAngle: number): this;
    /**
     * Angle, in radians, from centre of spotlight where falloff ends. Must be > innerConeAngle and
     * ≤ PI / 2.0.
     */
    getOuterConeAngle(): number;
    /**
     * Angle, in radians, from centre of spotlight where falloff ends. Must be > innerConeAngle and
     * ≤ PI / 2.0.
     */
    setOuterConeAngle(outerConeAngle: number): this;
}
